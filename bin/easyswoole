#!/usr/bin/env php

<?php

define('ROOT', realpath(getcwd()));

foreach ([__DIR__ . '/../../../autoload.php', __DIR__ . '/../vendor/autoload.php'] as $file) {
    if (file_exists($file)) {
        require $file;
        break;
    }
}

function commandHandler()
{
    list($command, $options) = commandParser();
    switch ($command) {
        case 'start':
            installCheck();
            serverStart($options);
            break;
        case 'stop':
            installCheck();
            serverStop($options);
            break;
        case 'reload':
            installCheck();
            serverReload($options);
            break;
        case 'install':
            serverInstall($options);
            break;
        case 'help':
        default:
            showHelp($options);
    }
}

function commandParser()
{
    global $argv;
    $command = '';
    $options = array();
    if (isset($argv[1])) {
        $command = $argv[1];
    }
    foreach ($argv as $item) {
        if (substr($item, 0, 2) === '--') {
            $temp          = trim($item, "--");
            $temp          = explode("-", $temp);
            $key           = array_shift($temp);
            $options[$key] = array_shift($temp) ?: '';
        }
    }
    return array($command, $options);
}

function opCacheClear()
{
    if (function_exists('apc_clear_cache')) {
        apc_clear_cache();
    }
    if (function_exists('opcache_reset')) {
        opcache_reset();
    }
}

function envCheck()
{
    if (phpversion() < 5.6) {
        die("PHP version\e[31m must >= 5.6\e[0m\n");
    }
    if (phpversion('swoole') < 1.9) {
        die("Swoole extension version\e[31m must >= 1.9.5\e[0m\n");
    }
    if (!class_exists('EasySwoole\Core\Core')) {
        die("Autoload fail!\nPlease try to run\e[31m composer install\e[0m in " . ROOT . "\n");
    }
}

function installCheck()
{
    $lockFile = ROOT . '/easyswoole.install';
    if (!is_file($lockFile)) {
        die("easySwoole framework has not been installed, Please run\e[031m easyswoole install\e[0m\n");
    }
}

function initConf()
{
    $Conf = ROOT . '/Config.php';
    if (is_file($Conf)) {
        echo 'Config.php has already existed, do you want to replace it? [Y/N]: ';
        $answer = trim(strtoupper(fgets(STDIN)));
        switch ($answer) {
            case 'N':
                return;
            default:
        }
    }
    copy(__DIR__ . '/../src/Resource/Config.php', $Conf);
}

function showHelp($options)
{
    $opName = '';
    $args   = array_keys($options);
    if ($args) $opName = $args[0];

    switch ($opName) {
        case 'start':
            echo <<<HELP_START
\e[33m操作:\e[0m
\e[31m  easyswoole start\e[0m
\e[33m简介:\e[0m
\e[36m  执行本命令可以启动框架 可选的操作参数如下\e[0m
\e[33m参数:\e[0m
\e[32m  --d \e[0m      以守护模式启动框架\n
HELP_START;
            break;
        case 'stop':
            echo <<<HELP_STOP
\e[33m操作:\e[0m
\e[31m  easyswoole stop\e[0m
\e[33m简介:\e[0m
\e[36m  执行本命令可以停止框架 可选的操作参数如下\e[0m
\e[33m参数:\e[0m
\e[32m  --f \e[0m      强制停止服务\n
HELP_STOP;
            break;
        case 'reload':
            echo <<<HELP_STOP
\e[33m操作:\e[0m
\e[31m  easyswoole reload\e[0m
\e[33m简介:\e[0m
\e[36m  执行本命令可以重启框架 可选的操作参数如下\e[0m
\e[33m参数:\e[0m
\e[32m  --all \e[0m    重启所有进程\n
HELP_STOP;
            break;
        case 'install':
            echo <<<HELP_INSTALL
\e[33m操作:\e[0m
\e[31m  easyswoole install\e[0m
\e[33m简介:\e[0m
\e[36m  安装并初始化easySwoole相关目录\e[0m
\e[33m参数:\e[0m
\e[32m  本操作没有相关的参数\e[0m\n
HELP_INSTALL;
            break;
        default:
            showLogo();
            echo <<<DEFAULTHELP
\n欢迎使用为API而生的\e[32m easySwoole\e[0m 框架 当前版本: \e[34m2.x\e[0m

\e[33m使用:\e[0m
  easyswoole [操作] [选项]

\e[33m操作:\e[0m
\e[32m  install \e[0m      安装easySwoole
\e[32m  start \e[0m        启动easySwoole
\e[32m  stop \e[0m         停止easySwoole
\e[32m  reload \e[0m       重启easySwoole
\e[32m  help \e[0m         查看命令的帮助信息\n
\e[31m有关某个操作的详细信息 请使用\e[0m help \e[31m命令查看 \e[0m
\e[31m如查看\e[0m start \e[31m操作的详细信息 请输入\e[0m easyswoole help --start\n\n
DEFAULTHELP;
    }
}

function showLogo()
{
    echo <<<LOGO
  ______                          _____                              _
 |  ____|                        / ____|                            | |
 | |__      __ _   ___   _   _  | (___   __      __   ___     ___   | |   ___
 |  __|    / _` | / __| | | | |  \___ \  \ \ /\ / /  / _ \   / _ \  | |  / _ \
 | |____  | (_| | \__ \ | |_| |  ____) |  \ V  V /  | (_) | | (_) | | | |  __/
 |______|  \__,_| |___/  \__, | |_____/    \_/\_/    \___/   \___/  |_|  \___|
                          __/ |
                         |___/

LOGO;
}

function serverStart($options)
{
    showLogo();
    $inst = \EasySwoole\Core\Core::getInstance()->initialize();
    if (in_array('d', $options)) {
        \EasySwoole\Config::getInstance()->setConf("SERVER.CONFIG.daemonize", true);
    }
    $inst->run();
}

function serverStop($options)
{
    $inst    = \EasySwoole\Core\Core::getInstance()->initialize();
    $pidFile = \EasySwoole\Config::getInstance()->getConf("SERVER.CONFIG.pid_file");
    if (file_exists($pidFile)) {
        $pid = file_get_contents($pidFile);

        if (!swoole_process::kill($pid, 0)) {
            echo "PID :{$pid} not exist \n";
            return;
        }

        if (in_array('-f', $options)) {
            swoole_process::kill($pid, SIGKILL);
        } else {
            swoole_process::kill($pid);
        }

        //等待5秒
        $time = time();
        while (true) {
            usleep(1000);
            if (swoole_process::kill($pid, 0)) {
                echo "server stop at " . date("y-m-d h:i:s") . "\n";
                if (is_file($pidFile)) {
                    unlink($pidFile);
                }
                break;
            } else {
                if (time() - $time > 5) {
                    echo "stop server fail.try -f again \n";
                    break;
                }
            }
        }
    } else {
        echo "PID file does not exist, please check whether to run in the daemon mode!\n";
    }
}

function serverReload($options)
{
    $inst    = \EasySwoole\Core\Core::getInstance()->initialize();
    $pidFile = \EasySwoole\Config::getInstance()->getConf("SERVER.CONFIG.pid_file");
    if (file_exists($pidFile)) {
        if (in_array('all', $options)) {
            $sig = SIGUSR1;
        } else {
            $sig = SIGUSR2;
        }
        opCacheClear();
        $pid = file_get_contents($pidFile);
        if (!swoole_process::kill($pid, 0)) {
            echo "pid :{$pid} not exist \n";
            return;
        }
        swoole_process::kill($pid, $sig);
        echo "send server reload command at " . date("y-m-d h:i:s") . "\n";

    } else {
        echo "PID file does not exist, please check whether to run in the daemon mode!\n";
    }
}

function serverInstall($options)
{
    $lockFile = ROOT . '/easyswoole.install';
    if (!is_file($lockFile)) {
        initConf();
        $conf    = \EasySwoole\Config::getInstance();
        $temPath = $conf->getConf('TEMP_DIR');
        $logPath = $conf->getConf('LOG_DIR');

        if (!\EasySwoole\Core\Utility\File::createDir($temPath)) {
            die("create Temp Directory:{$temPath} fail");
        }

        if (!\EasySwoole\Core\Utility\File::createDir($logPath)) {
            die("create Log Directory:{$logPath} fail");
        }

        file_put_contents($lockFile, 'installed at ' . date('Y-m-d H:i:s'));
        echo "easySwoole server install complete!\n";
    } else {
        die("easySwoole framework has been installed\nPlease remove \e[31m{$lockFile}\e[0m and try again\n");
    }
}

envCheck();
commandHandler();
